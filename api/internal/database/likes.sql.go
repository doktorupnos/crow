// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: likes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLike = `-- name: CreateLike :exec
INSERT INTO likes (
    user_id, post_id
) VALUES ($1, $2)
`

type CreateLikeParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) error {
	_, err := q.exec(ctx, q.createLikeStmt, createLike, arg.UserID, arg.PostID)
	return err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE user_id = $1 AND post_id = $2
`

type DeleteLikeParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.exec(ctx, q.deleteLikeStmt, deleteLike, arg.UserID, arg.PostID)
	return err
}

const getLikesForPost = `-- name: GetLikesForPost :one
SELECT COUNT(*)
FROM likes
WHERE post_id = $1
`

func (q *Queries) GetLikesForPost(ctx context.Context, postID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.getLikesForPostStmt, getLikesForPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userLikesPost = `-- name: UserLikesPost :one
SELECT EXISTS(
    SELECT 1
    FROM likes
    WHERE user_id = $1 AND post_id = $2
) AS has_liked
`

type UserLikesPostParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) UserLikesPost(ctx context.Context, arg UserLikesPostParams) (bool, error) {
	row := q.queryRow(ctx, q.userLikesPostStmt, userLikesPost, arg.UserID, arg.PostID)
	var has_liked bool
	err := row.Scan(&has_liked)
	return has_liked, err
}
