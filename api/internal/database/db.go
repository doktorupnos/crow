// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createFollowStmt, err = db.PrepareContext(ctx, createFollow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFollow: %w", err)
	}
	if q.createLikeStmt, err = db.PrepareContext(ctx, createLike); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLike: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteFollowStmt, err = db.PrepareContext(ctx, deleteFollow); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollow: %w", err)
	}
	if q.deleteLikeStmt, err = db.PrepareContext(ctx, deleteLike); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLike: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.followsUserStmt, err = db.PrepareContext(ctx, followsUser); err != nil {
		return nil, fmt.Errorf("error preparing query FollowsUser: %w", err)
	}
	if q.getFollowerCountStmt, err = db.PrepareContext(ctx, getFollowerCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowerCount: %w", err)
	}
	if q.getFollowersStmt, err = db.PrepareContext(ctx, getFollowers); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowers: %w", err)
	}
	if q.getFollowingStmt, err = db.PrepareContext(ctx, getFollowing); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowing: %w", err)
	}
	if q.getFollowingCountStmt, err = db.PrepareContext(ctx, getFollowingCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowingCount: %w", err)
	}
	if q.getLikesForPostStmt, err = db.PrepareContext(ctx, getLikesForPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesForPost: %w", err)
	}
	if q.getPostsStmt, err = db.PrepareContext(ctx, getPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetPosts: %w", err)
	}
	if q.getPostsByUserStmt, err = db.PrepareContext(ctx, getPostsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByUser: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByNameStmt, err = db.PrepareContext(ctx, getUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByName: %w", err)
	}
	if q.userLikesPostStmt, err = db.PrepareContext(ctx, userLikesPost); err != nil {
		return nil, fmt.Errorf("error preparing query UserLikesPost: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createFollowStmt != nil {
		if cerr := q.createFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFollowStmt: %w", cerr)
		}
	}
	if q.createLikeStmt != nil {
		if cerr := q.createLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLikeStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteFollowStmt != nil {
		if cerr := q.deleteFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowStmt: %w", cerr)
		}
	}
	if q.deleteLikeStmt != nil {
		if cerr := q.deleteLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLikeStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.followsUserStmt != nil {
		if cerr := q.followsUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing followsUserStmt: %w", cerr)
		}
	}
	if q.getFollowerCountStmt != nil {
		if cerr := q.getFollowerCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowerCountStmt: %w", cerr)
		}
	}
	if q.getFollowersStmt != nil {
		if cerr := q.getFollowersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowersStmt: %w", cerr)
		}
	}
	if q.getFollowingStmt != nil {
		if cerr := q.getFollowingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowingStmt: %w", cerr)
		}
	}
	if q.getFollowingCountStmt != nil {
		if cerr := q.getFollowingCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowingCountStmt: %w", cerr)
		}
	}
	if q.getLikesForPostStmt != nil {
		if cerr := q.getLikesForPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesForPostStmt: %w", cerr)
		}
	}
	if q.getPostsStmt != nil {
		if cerr := q.getPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsStmt: %w", cerr)
		}
	}
	if q.getPostsByUserStmt != nil {
		if cerr := q.getPostsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByUserStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByNameStmt != nil {
		if cerr := q.getUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByNameStmt: %w", cerr)
		}
	}
	if q.userLikesPostStmt != nil {
		if cerr := q.userLikesPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userLikesPostStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createFollowStmt      *sql.Stmt
	createLikeStmt        *sql.Stmt
	createPostStmt        *sql.Stmt
	createUserStmt        *sql.Stmt
	deleteFollowStmt      *sql.Stmt
	deleteLikeStmt        *sql.Stmt
	deletePostStmt        *sql.Stmt
	followsUserStmt       *sql.Stmt
	getFollowerCountStmt  *sql.Stmt
	getFollowersStmt      *sql.Stmt
	getFollowingStmt      *sql.Stmt
	getFollowingCountStmt *sql.Stmt
	getLikesForPostStmt   *sql.Stmt
	getPostsStmt          *sql.Stmt
	getPostsByUserStmt    *sql.Stmt
	getUserByIDStmt       *sql.Stmt
	getUserByNameStmt     *sql.Stmt
	userLikesPostStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createFollowStmt:      q.createFollowStmt,
		createLikeStmt:        q.createLikeStmt,
		createPostStmt:        q.createPostStmt,
		createUserStmt:        q.createUserStmt,
		deleteFollowStmt:      q.deleteFollowStmt,
		deleteLikeStmt:        q.deleteLikeStmt,
		deletePostStmt:        q.deletePostStmt,
		followsUserStmt:       q.followsUserStmt,
		getFollowerCountStmt:  q.getFollowerCountStmt,
		getFollowersStmt:      q.getFollowersStmt,
		getFollowingStmt:      q.getFollowingStmt,
		getFollowingCountStmt: q.getFollowingCountStmt,
		getLikesForPostStmt:   q.getLikesForPostStmt,
		getPostsStmt:          q.getPostsStmt,
		getPostsByUserStmt:    q.getPostsByUserStmt,
		getUserByIDStmt:       q.getUserByIDStmt,
		getUserByNameStmt:     q.getUserByNameStmt,
		userLikesPostStmt:     q.userLikesPostStmt,
	}
}
